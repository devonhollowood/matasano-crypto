extern crate rand;
extern crate num;

use num::bigint::BigUint;
use num::traits::{Zero, One, FromPrimitive};

#[test]
#[allow(non_snake_case)]
fn small_num() {
    use rand::Rng;
    let mut rng = rand::thread_rng();
    let p = 5u32;
    let g = 37u32;
    let a = rng.gen::<u32>() % p;
    let A = g.pow(a) % p;
    let b = rng.gen::<u32>() % p;
    let B = g.pow(b) % p;
    assert_eq!(B.pow(a) % p, A.pow(b) % p);
}

#[test]
fn big_num() {
    use rand::Rng;
    let mut rng = rand::thread_rng();
    let p = BigUint::from_bytes_be(
       &[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f, 0xda, 0xa2,
         0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b, 0x80, 0xdc, 0x1c, 0xd1,
         0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6,
         0x3b, 0x13, 0x9b, 0x22, 0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd,
         0xef, 0x95, 0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,
         0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51, 0xc2, 0x45,
         0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6, 0xf4, 0x4c, 0x42, 0xe9,
         0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff, 0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed,
         0xee, 0x38, 0x6b, 0xfb, 0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11,
         0x7c, 0x4b, 0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,
         0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda, 0x48, 0x36,
         0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8, 0xfd, 0x24, 0xcf, 0x5f,
         0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3, 0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56,
         0x20, 0x85, 0x52, 0xbb, 0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d,
         0x67, 0x0c, 0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,
         0xca, 0x23, 0x73, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
         [..]
    );
    let g = BigUint::from_u8(2).unwrap();
    let a = BigUint::from_u64(rng.gen::<u64>()).unwrap();
    let A = mod_exp(&g, &a, &p);
    let b = BigUint::from_u64(rng.gen::<u64>()).unwrap();
    let B = mod_exp(&g, &b, &p);
    assert_eq!(mod_exp(&B, &a, &p), mod_exp(&A, &b, &p));
}

fn mod_exp(base: &BigUint, exponent: &BigUint, modulus: &BigUint) -> BigUint {
    let mut result = BigUint::one();
    let mut b = base.clone() % modulus;
    let mut e = exponent.clone() % modulus;
    while e > BigUint::zero() {
        if &e % BigUint::from_u8(2).unwrap() == BigUint::one() {
            result = (result * &b) % modulus;
        }
        e = e >> 1;
        b = (&b * &b) % modulus;
    }
    result
}
